(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* 
A rough implementation of Wordle,
https://www.powerlanguage.co.uk/wordle/
by David Reiss: dreiss@scientificarts.com
Permission is granted to use and to modify the code for any non-commercial purposes.
Enjoy: I probably will not supply any updates to this 
but have fun with the code if you wish to modify and experiment with it. 

This notebook, when saved, also creates a .m package file with the same name.
*)


(*
Once the code is executed you then have access to 

MWordle[Deploy] 

which launches the game.

You can tab between the fields where you type letters, 
or you can click within each at each step.
However, I have not implemented the ability to just type from 
the keyboard and automatically place letters in each subsequent field. 
*)


BeginPackage["MWordle`MWordle`"]


$MWordleNotebook::usage="$MWordleNotebook is the NotebookObject of an open MWordle application.";


resetMWordleParameters::usage="resetMWordleParameters[] resets the applicaiton parameter to their original state \
so that a new instance of the game cal be played. ";


$mwordleSizes::usage="$mwordleSizes is a list of word lengths that the game can be played with.";


mwordleInstructions::usage="mwordleInstructions[] generates the instructions for the game.";


MWordle::usage="MWordle[Default] launches the application in its own window. \
\n\nMWordle[] generates an instance of the application. You should not \
have more than one instance of the application open at any one time.";


$mwordleWordLength::usage="$mwordleWordLength is the number of characters in the game's word.";


$mwordleData::usage="$mwordleData holds the data for the current state of game play guesses.";


$defaultMWordleData::usage="$defaultMWordleData is the initial default value for $mwordleData. ";


mwordleGrid::usage="mwordleGrid[] generates a grid for the application.";


$enabled::usage="$enabled determines which row in the puzzle is currently enabled for entry.";


$defaultEnabled::usage="$defaultEnabled is the initial default value of $enabled.";


$wordList::usage="$wordList contains the full dictionary of words to be used in the application. \
It is an Association with integer keys for each length of word you have chosen.";


checkWords::usage="checkWords[] is the funciton that checks the status of the word that you are entering.";


$checkMessage::usage="$checkMessage holds any messages that should be shown in the applicaiton.";


$mwordleDataBackgrounds::usage="$mwordleDataBackgrounds holds the durrent backgorund \
colors for all the character inputs.";


$defaultMWordleDataBackgrounds::usage="$defaultMWordleDataBackgrounds is the initial \
default value of $mwordleDataBackgrounds.";


$almostColor::usage="$almostColor is the backgorund color for a correct character \
that is not in the correct location.";


$exactColor::usage="$exactColor is the backgorund color for a correct character that \
is in the correct location.";


$noMatchColor::usage="$noMatchColor is the backgorund color for an incorrect character.";


keyboard::usage="keyboard[] generates the application's keyboard.";


$notAMatchCharacters::usage="$notAMatchCharacters holds the list of characters that \
are not a match ot the word in the current \
state of application play.";


$cheating::usage="$cheating is a parameter that actually holds the word that you are trying to guess. \
Play fair! don't use this ;-).";


$wordTypes::usage="$wordTypes is the set of rules for possible groups of words to use in \
the application: {\"KnownWords\",\"Noun\",\"Verb\",\"Adjective\"}. \
in the list of rules, \"KnownWords\" is referred to as All.";


$currentWordType::usage="$currentWordType is the currently chosen menu selection out of $wordTypes.";


Begin["`Private`"]


(* initializations *)


$mwordleSizes={4,5,6,7};


$mwordleWordLength=5;


$mwordleData= AssociationThread[Flatten[Table[{i,j},{i,1,$mwordleWordLength+1},{j,1,$mwordleWordLength}],1]->""];


$defaultMWordleData= $mwordleData;


$mwordleDataBackgrounds=
	AssociationThread[Flatten[Table[{i,j},{i,1,$mwordleWordLength+1},{j,1,$mwordleWordLength}],1]->White];


$defaultMWordleDataBackgrounds=$mwordleDataBackgrounds;


$enabled=KeySort[Join[<|1->True|>,AssociationThread[Range[2,$mwordleWordLength+1]->False]]];


$defaultEnabled=$enabled;


$cheating="Too soon! Make a guess first.";


$currentWordType="KnownWords";


$almostColor=RGBColor[0.736507, 0.65626, 0.278141];


$exactColor=RGBColor[0.352529, 0.613016, 0.318318];


$noMatchColor=LightGray;


resetMWordleParameters[mwordleSize_Integer:5]:=
	Module[{},
	
		$mwordleWordLength=mwordleSize;
		$mwordleData= 
			AssociationThread[Flatten[Table[{i,j},{i,1,$mwordleWordLength+1},{j,1,$mwordleWordLength}],1]->""];
		$defaultMWordleData= $mwordleData;
		$mwordleDataBackgrounds=
			AssociationThread[Flatten[Table[{i,j},{i,1,$mwordleWordLength+1},{j,1,$mwordleWordLength}],1]->White];
		$defaultMWordleDataBackgrounds=$mwordleDataBackgrounds;
		$enabled=KeySort[Join[<|1->True|>,AssociationThread[Range[2,$mwordleWordLength+1]->False]]];
		$defaultEnabled=$enabled;
		$cheating="Too soon! Make a guess first.";
		(* Do not include $currentWordType here so that it is retained when starting a new instance *)
]


mwordleGrid[]:=
	DynamicModule[{fields},
		
		$mwordleData=$defaultMWordleData;
		$mwordleDataBackgrounds=$defaultMWordleDataBackgrounds;
	
		fields=
			Table[
				Dynamic[
					Framed[
						InputField[
							Dynamic[$mwordleData[{#1,#2}],
								Function[x,(
									$mwordleData[{#1,#2}]=x;
									If[!StringMatchQ[$mwordleData[{#1,#2}],LetterCharacter],
										$mwordleData[{#1,#2}]=""];
									If[StringLength[$mwordleData[{#1,#2}]]>1,
										$mwordleData[{#1,#2}]=StringTake[$mwordleData[{#1,#2}],1]];
									$mwordleData[{#1,#2}]=ToUpperCase[$mwordleData[{#1,#2}]])]
								],
							String,
							ContinuousAction->True,
							Enabled->Dynamic[$enabled[#1]],FieldSize->{1,1},Appearance->"Frameless"],
						RoundingRadius->1,FrameStyle->Brown,Background->$mwordleDataBackgrounds[{#1,#2}]
					],
					TrackedSymbols:>{$mwordleDataBackgrounds}
				]&[i,j],
				{i,1,$mwordleWordLength+1},{j,1,$mwordleWordLength}
			];
				
		Framed[
			Grid[fields,Alignment->{Center,Center}],
			RoundingRadius->5,FrameStyle->Brown,
			Background->White
		]
	]


keyboard[excludedLetters:{_String...},magnification_?NumberQ]:=
	Module[{keys},
		keys=
			{
				{"Q","W","E","R","T","Y","U","I","O","P"},
				{"A","S","D","F","G","H","J","K","L"},
				{"","Z","X","C","V","B","N","M",""}
			};
			
			keys=Map[
				Button[#,NotebookWrite[EvaluationNotebook[],#],
					Background->If[MemberQ[excludedLetters,#],LightGray,White],
					ImageMargins->1]&,keys,{2}];
			Magnify[
				Framed[#,{FrameStyle->RGBColor[0.6666666666666666, 0.6666666666666666, 0.6666666666666666],RoundingRadius->5,Background->LightGray}]&@(
					Grid[keys,Alignment->Center,Background->None,ItemSize->{1.7,1.1}]
					),magnification]
	]


keyboard[excludedLetters:{_String...}]:=keyboard[excludedLetters,1.2];


mwordleInstructions[]:=
	Column[
		{
			SwatchLegend[
				{$exactColor,$almostColor,$noMatchColor},
				{
					"Letter is in the word at the correct spot",
					"Letter is in the word but not at the spot",
					"Letter is not in the word"
				},LegendMarkerSize->15,
				LegendFunction->"Frame",LegendLayout->"Column"
			],
			Spacer[1],
			"\[HeartSuit] Guess the word one row at a time starting at the top.",
			"\[HeartSuit] Each guess must be a valid word.",
			"\[HeartSuit] The menuu allows you to restrict the part of speech that the word is chosen from.",
			"\[HeartSuit] Click on Enter to check each guess.",
			"\[HeartSuit] A correctly guessed letter may appear one or more times in the word.",
			Spacer[1]
		},
		BaseStyle->{11,FontFamily->"Arial"}
	]


$wordTypes={"KnownWords"->All,"Noun"->"Nouns","Verb"->"Verbs","Adjective"->"Adjectives"};


$wordList=<||>;


$wordList["KnownWords"]=
	AssociationThread[
		$mwordleSizes->
		(
		Function[size,
			Module[{words},
			
				(* look for size and size-1 so that Pluralize can yield a plural 
				with the right number of characters if the plural just adds an s *)
				words=Select[WordList["KnownWords",IncludeInflections->True],MatchQ[StringLength[#],size|size-1]&];
				words=Quiet@Union[Flatten[{words,Pluralize/@words}]];
				words=Select[words,MatchQ[StringLength[#],size]&];
				
				words=ToUpperCase/@words;
				words=Select[words,StringMatchQ[#,LetterCharacter.. ]&];
				Union[words]
				]
			]/@$mwordleSizes
		)
	];


(
	$wordList[#]=
		AssociationThread[
			$mwordleSizes->
			(
			Function[size,
				Module[{words},
				
					words=Select[WordList[{"KnownWords",#},IncludeInflections->True],MatchQ[StringLength[#],size|size-1]&];
					words=Quiet@Union[Flatten[{words,Pluralize/@words}]];
					words=Select[words,MatchQ[StringLength[#],size]&];
					
					words=ToUpperCase/@words;
					words=Select[words,StringMatchQ[#,LetterCharacter.. ]&];
					Union[words]
					]
				]/@$mwordleSizes
			)
		]
	)&/@{"Noun","Verb","Adjective"};


$checkMessage="";


checkWords[theWord_String]:=
	Catch@Module[{theEnabledRow,word,exactMatchBackgrounds,notAMatchBackgrounds,notAMatchCases,theWordCharacters},
		
		theEnabledRow=Keys[Select[$enabled,#&]];
		If[Length[theEnabledRow]=!=1,Throw[Null],theEnabledRow=First[theEnabledRow]];
		
		$cheating=theWord;
		
		theWordCharacters=Characters[theWord];
		word=StringJoin[Table[$mwordleData[{theEnabledRow,j}],{j,1,$mwordleWordLength}]];
		
		If[StringLength[word]=!=$mwordleWordLength,Throw[$checkMessage=Style["Word is too short.",Red]]];
		
		If[!MemberQ[$wordList[$currentWordType][$mwordleWordLength],word],
			Throw[$checkMessage=Style["Not a word of the right type.",Red]]];
		
		If[StringMatchQ[word,theWord,IgnoreCase->True],
			$enabled[theEnabledRow]=False;
			$checkMessage=Style["Yes! The word is: "<>ToUpperCase[theWord],Darker@Green]];
		
		Switch[theEnabledRow,
		
			1,Null,
			_,
			If[
				MemberQ[Take[StringJoin/@Partition[Values[$mwordleData],$mwordleWordLength],theEnabledRow-1],word],
				Throw[Scan[($mwordleData[{theEnabledRow,#}]="")&,Range[$mwordleWordLength]];$checkMessage=""]
			]
		];
		
			notAMatchCases=
					AssociationThread[
						Keys[$mwordleData]->	
							Flatten[
								Map[If[!MemberQ[theWordCharacters,Last[#]]&&Last[#]=!="",Missing[],None]&,
									Transpose[{theWordCharacters,#}]&/@Partition[Values[$mwordleData],$mwordleWordLength],{2}]
							]
					];
					
		If[!StringMatchQ[word,theWord,IgnoreCase->True],
			$enabled[theEnabledRow]=False;
			If[theEnabledRow<$mwordleWordLength+1,
				$enabled[theEnabledRow+1]=True;
				
				$notAMatchCharacters=Values[KeyTake[$mwordleData,Keys[Select[notAMatchCases,MissingQ]]]];
				
				$checkMessage=
					Grid[{
							{"Continue...",SpanFromLeft}
						},
						Alignment->Left,
						BaseStyle->{Blue}
					],
				
				$checkMessage=Style["Sorry! The correct word was: "<>ToUpperCase[theWord],Orange]
				]	
			];			
		
		$mwordleDataBackgrounds=
			If[MemberQ[Characters[theWord],#],$almostColor,White]&/@$mwordleData;
		
		exactMatchBackgrounds=
			AssociationThread[
				Keys[$mwordleData]->	
					Flatten[
						Map[If[First[#]===Last[#],$exactColor,None]&,
							Transpose[{theWordCharacters,#}]&/@Partition[Values[$mwordleData],$mwordleWordLength],{2}]
					]
			];
		exactMatchBackgrounds=DeleteCases[exactMatchBackgrounds,None];
		
		notAMatchBackgrounds=notAMatchCases/._Missing->$noMatchColor;
		notAMatchBackgrounds=DeleteCases[notAMatchBackgrounds,None];
				
		$mwordleDataBackgrounds=
			Join[KeyDrop[$mwordleDataBackgrounds,Flatten[{Keys[exactMatchBackgrounds],Keys[notAMatchBackgrounds]}]],
				exactMatchBackgrounds,notAMatchBackgrounds];
				
		$mwordleDataBackgrounds=KeyTake[$mwordleDataBackgrounds,Keys[$defaultMWordleDataBackgrounds]];

	]


MWordle[word:_String|Automatic]:=

	TextCell[
		DynamicModule[{selectedWord,toCheat=False},
		
			$enabled=$defaultEnabled;
			$checkMessage="";
			$notAMatchCharacters={};
			
			If[MatchQ[word,Automatic],
				selectedWord=First[RandomChoice[$wordList[$currentWordType][$mwordleWordLength],1]],
				selectedWord=word
			];
			
			Framed[
				Grid[
					{
						{mwordleGrid[],Spacer[1]},
						{Dynamic[keyboard[$notAMatchCharacters]],SpanFromLeft},
						{Item[Button["Enter",checkWords[selectedWord],ImageSize->70],Alignment->Left],SpanFromLeft},
						{Item[Row[{Button["I give up ;-)",$checkMessage=$cheating,ImageSize->120,Enabled->Dynamic[toCheat]],
										Spacer[10],Checkbox[Dynamic[toCheat]]}],Alignment->Left],SpanFromLeft},
						{Item[Dynamic[$checkMessage],Alignment->Left],SpanFromLeft}
					},
					BaseStyle->{18,FontFamily->"Arial"},
					Alignment->{Left,Top}
				],
				RoundingRadius->5,Background->White,FrameStyle->Gray
			]
	
		],
		"Text",
		ShowStringCharacters->False
	]


MWordle[]:=MWordle[Automatic]


MWordle[Deploy]:=
Catch@Module[{},
	If[MemberQ[Notebooks[],$MWordleNotebook],Throw[SetSelectedNotebook[$MWordleNotebook]]];
	
	$MWordleNotebook=
		CreateDocument[
			{
			TextCell[
				DynamicModule[{mwordle=MWordle[],size=$mwordleWordLength,partOfSpeech},
					Framed[#,RoundingRadius->5,Background->LightGray,FrameStyle->Gray]&@
					(
						Column[{
							Row[{
									Button["New MWordle",
										resetMWordleParameters[size];mwordle=MWordle[],
										Method->"Queued",ImageSize->All],
									Spacer[10],
									PopupWindow[Style["\[LightBulb]",16,Bold,Brown],mwordleInstructions[],LineIndent->0,WindowSize->All]
								},
								BaseStyle->{12,FontFamily->"Arial"}],
							Row[{
								Spacer[5],"Size",Spacer[5],
								RadioButtonBar[Dynamic[size,(size=#;resetMWordleParameters[size];mwordle=MWordle[])&],
									$mwordleSizes,Method->Active,Appearance->Small],
								Spacer[10],
								"Part of speech",,Spacer[5],
								PopupMenu[
									Dynamic[partOfSpeech,
										(partOfSpeech=#;
										$currentWordType=partOfSpeech;
										resetMWordleParameters[size];
										mwordle=MWordle[])&],
									$wordTypes,MenuStyle->{11,FontFamily->"Arial"}]},
								BaseStyle->{12,FontFamily->"Arial"}],
							Dynamic[mwordle]
							},
							Alignment->{Left,Top},
							Background->White
						]),
					SaveDefinitions->True
				],"Text",ShowStringCharacters->False,CellMargins->{{10, 10}, {7, 8}}]
			},
			Deployed->True,WindowTitle->"MWordle",WindowSize->All,
			ShowCellBracket->False,WindowFrame->"Palette",WindowFloating->False,
			Background->LightBrown,WindowMargins->{{Automatic,Automatic}, {Automatic, 50}}
		]
	]


End[]


EndPackage[]



